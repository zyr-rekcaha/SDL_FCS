@InProceedings{Harel85,
author="Harel, D.
and Pnueli, A.",
editor="Apt, Krzysztof R.",
title="On the Development of Reactive Systems",
booktitle="Logics and Models of Concurrent Systems",
year="1985",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="477--498",
abstract="Some observations are made concerning the process of developing complex systems. A broad class of systems, termed reactive, is singled out as being particularly problematic when it comes to finding satisfactory methods for behavioral description. In this paper we recommend the recently proposed statechart method for this purpose. Moreover, it is observed that most reactive systems cannot be developed in a linear stepwise fashion, but, rather, give rise to a two-dimensional development process, featuring behavioral aspects in the one dimension and implementational ones in the other. Concurrency may occur in both dimensions, as orthogonality of states in the one and as parallelism of subsystems in the other. A preliminary approach to working one's way through this ``magic square'' of system development is then presented. The ideas described herein seem to be relevant to a wide variety of application areas.",
isbn="978-3-642-82453-1"
}

@ARTICLE{Benveniste03,
author={A. {Benveniste} and P. {Caspi} and S. A. {Edwards} and N. {Halbwachs} and P. {Le Guernic} and R. {de Simone}},
journal={Proceedings of the IEEE},
title={The synchronous languages 12 years later},
year={2003},
volume={91},
number={1},
pages={64-83}
}

@article{Benveniste91,
title = "Synchronous programming with events and relations: the SIGNAL language and its semantics",
journal = "Science of Computer Programming",
volume = "16",
number = "2",
pages = "103 - 149",
year = "1991",
issn = "0167-6423",
author = "Albert Benveniste and Paul Le Guernic and Christian Jacquemot"
}

@ARTICLE{Halbwachs91,
author={N. {Halbwachs} and P. {Caspi} and P. {Raymond} and D. {Pilaud}},
journal={Proceedings of the IEEE},
title={The synchronous data flow programming language LUSTRE},
year={1991},
volume={79},
number={9},
pages={1305-1320}
}

@article{Berry92,
title = "The {Esterel} synchronous programming language: design, semantics, implementation",
journal = "Science of Computer Programming",
volume = "19",
number = "2",
pages = "87 - 152",
year = "1992",
issn = "0167-6423",
author = "G\'erard Berry and Georges Gonthier"
}

@INPROCEEDINGS{Espiau90,
  author={B. {Espiau} and E. {Coste-Maniere}},
  booktitle={Proceedings of the IEEE International Workshop on Intelligent Motion Control},
  title={A Synchronous Approach for Control Sequencing in Robotics Application},
  year={1990},
  volume={2},
  number={},
  pages={503-508}
}

@article{Berry00,
title = {ESTEREL: a formal method applied to avionic software development},
journal = {Science of Computer Programming},
volume = {36},
number = {1},
pages = {5-25},
year = {2000},
issn = {0167-6423},
author = {G\'erard Berry and Amar Bouali and Xavier Fornari and Emmanuel Ledinot and Eric Nassor and Robert {de Simone}},
keywords = {Avionic software, Synchronous reactive systems, Safety-critical systems, E, Modularity, Automatic code generation, Optimization, Verification},
abstract = {Dassault Aviation is a French aircraft manufacturer building civil business jets (the Falcon family) and military jet fighters (the Mirage and Rafale families). It has been concerned with formal methods inside the development process of avionic software since 1989. In this paper, we give a comprehensive account of three industrial-size studies carried out at Dassault Aviation using the reactive synchronous language ESTEREL and its toolset, in collaboration with the public research team that develops ESTEREL at Ecole des Mines de Paris and INRIA Sophia-Antipolis. We deal with software engineering issues related to compilation, optimization and verification of safety-critical embedded software. The goal is to ensure production of efficient and reliable code.}
}

@article{Gamatie04,
title = {Modeling of Avionics Applications and Performance Evaluation Techniques Using the Synchronous Language SIGNAL},
journal = {Electronic Notes in Theoretical Computer Science},
volume = {88},
pages = {87-103},
year = {2004},
note = {SLAP 2003: Synchronous Languages, Applications and Programming, A Satellite Workshop of ECRST 2003},
issn = {1571-0661},
author = {Abdoulaye Gamatié and Thierry Gautier and Lo\"ic Besnard}
}

@INPROCEEDINGS{Qian15,
  author={J. {Qian} and J. {Liu} and X. {Chen} and J. {Sun}},
  booktitle={2015 IEEE/ACM 1st International Workshop on Complex Faults and Failures in Large Software Systems (COUFLESS)},
  title={Modeling and Verification of Zone Controller: The SCADE Experience in China's Railway Systems},
  year={2015},
  volume={},
  number={},
  pages={48-54}
}

@article{Lee15,
author = {Lee, Edward},
year = {2015},
month = {03},
pages = {4837-4869},
title = {The Past, Present and Future of Cyber-Physical Systems: A Focus on Models},
volume = {15},
journal = {Sensors (Basel, Switzerland)}
}

@inproceedings{Lohstroh19,
	author = {Marten Lohstroh, and Edward A. Lee},
	title = {Deterministic Actors},
	booktitle = {Forum on Specification and Design Languages (FDL),},
	month = {September 2-4},
	year = {2019},
	abstract = {Actors have become widespread in programming languages and programming frameworks focused on parallel and distributed computing. While actors provide a more disciplined model for concurrency than threads, their interactions, if not constrained, admit nondeterminism. As a consequence, actor pro- grams may exhibit unintended behaviors and are less amenable to rigorous testing. We show that nondeterminism can be handled in a number of ways, surveying dataflow dialects, process networks, synchronous-reactive models, and discrete-event models. These existing approaches, however, tend to require centralized control, pose challenges to modular system design, or introduce a single point of failure. We describe “reactors,” a new coordination model that combines ideas from several of the aforementioned approaches to enable determinism while preserving much of the style of actors. Reactors promote modularity and allow for distributed execution. By using a logical model of time that can be associated with physical time, reactors also admit control over timing.}
}

@book{ProgramVerifications09,
  added-at = {2013-12-06T00:00:00.000+0100},
  author = {Apt, Krzysztof R. and de Boer, Frank S. and Olderog, Ernst-R\"udiger},
  biburl = {https://www.bibsonomy.org/bibtex/2e7368fea21cf4f1a6d988718e8433a70/dblp},
  ee = {http://dx.doi.org/10.1007/978-1-84882-745-5},
  interhash = {670fca86dea85f89d3407fd018ef09b8},
  intrahash = {e7368fea21cf4f1a6d988718e8433a70},
  isbn = {978-1-84882-745-5},
  keywords = {dblp},
  pages = {i-xxiii, 1-502},
  publisher = {Springer},
  series = {Texts in Computer Science},
  timestamp = {2013-12-07T11:32:50.000+0100},
  title = {Verification of Sequential and Concurrent Programs.},
  year = 2009
}

@inproceedings{Pratt76,
  added-at = {2014-12-16T00:00:00.000+0100},
  author = {Pratt, Vaughan R.},
  biburl = {https://www.bibsonomy.org/bibtex/2b2075d6c9a01fd33b566d130dbb36759/dblp},
  booktitle = {Annual IEEE Symposium on Foundations of Computer Science (FOCS)},
  crossref = {conf/focs/FOCS17},
  ee = {http://doi.ieeecomputersociety.org/10.1109/SFCS.1976.27},
  interhash = {51acc3ef5a502de3eb66d80229baa941},
  intrahash = {b2075d6c9a01fd33b566d130dbb36759},
  keywords = {dblp},
  pages = {109-121},
  publisher = {IEEE Computer Society},
  timestamp = {2015-06-19T01:58:57.000+0200},
  title = {Semantical Considerations on {Floyd-Hoare} Logic},
  year = 1976
}

@article{Hoare63,
	author = {Hoare, C. A. R.},
	title = {An Axiomatic Basis for Computer Programming},
	year = {1969},
	issue_date = {October 1969},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {12},
	number = {10},
	issn = {0001-0782},
	journal = {Commun. ACM},
	month = oct,
	pages = {576-580},
	numpages = {5},
	keywords = {machine-independent programming, programming language design, program documentation, axiomatic method, formal language definition, theory of programming? proofs of programs}
}

@book{Harel00,
  author = {Harel , David and Kozen, Dexter and Tiuryn, Jerzy},
  publisher = {MIT Press},
  title = {Dynamic Logic},
  year = 2000
}

@book{Harel79,
  added-at = {2002-01-03T00:00:00.000+0100},
  author = {Harel, David},
  biburl = {https://www.bibsonomy.org/bibtex/2be4957a8758b9853bf4023aa244722e7/dblp},
  date = {2002-01-03},
  description = {dblp},
  interhash = {813f62ef4c7a7c004d5e44ceff8edd6b},
  intrahash = {be4957a8758b9853bf4023aa244722e7},
  isbn = {3-540-09237-4},
  keywords = {dblp},
  publisher = {Springer},
  series = {Lecture Notes in Computer Science (LNCS)},
  timestamp = {2002-01-03T00:00:00.000+0100},
  title = {First-Order Dynamic Logic},
  volume = 68,
  year = 1979
}

@article{Harel82,
  added-at = {2011-07-05T00:00:00.000+0200},
  author = {Harel, David and Kozen, Dexter and Parikh, Rohit},
  biburl = {https://www.bibsonomy.org/bibtex/2f0cece415ff57d069cfe916a1a681bca/dblp},
  ee = {http://dx.doi.org/10.1016/0022-0000(82)90003-4},
  interhash = {d6a9632c5cc89ee7595122f12d447469},
  intrahash = {f0cece415ff57d069cfe916a1a681bca},
  journal = {Journal of Computer and System Sciences},
  keywords = {dblp},
  number = 2,
  pages = {144-170},
  timestamp = {2011-07-06T11:38:37.000+0200},
  title = {Process Logic: Expressiveness, Decidability, Completeness.},
  volume = 25,
  year = 1982
}

@article{Cook78,
  added-at = {2012-11-29T00:00:00.000+0100},
  author = {Cook, Stephen A.},
  biburl = {https://www.bibsonomy.org/bibtex/2514b545d66543170d882df7ad6dc1011/dblp},
  ee = {http://dx.doi.org/10.1137/0207005},
  interhash = {7a250c5a125fbe7b614c981e6857f635},
  intrahash = {514b545d66543170d882df7ad6dc1011},
  journal = {SIAM Journal on Computing},
  keywords = {dblp},
  number = 1,
  pages = {70-90},
  timestamp = {2012-11-30T11:42:27.000+0100},
  title = {Soundness and Completeness of an Axiom System for Program Verification.},
  volume = 7,
  year = 1978
}

@article{Milner83,
title = {Calculi for synchrony and asynchrony},
journal = {Theoretical Computer Science},
volume = {25},
number = {3},
pages = {267-310},
year = {1983},
issn = {0304-3975},
author = {Robin Milner},
abstract = {A calculus for distributed computation is studied, based upon four combinators. A central idea is an Abelian group of actions which models the interfaces between components of a distributed computing agent. Using a notion of bisimulation, congruence relations are defined over computing agents, and thence an algebraic theory is derived. The calculus models both synchronous and asynchronous computation. In particular, it is shown that the author's Calculus of Communicating Systems (1980), which is an asynchronous model, is derivable from the calculus presented here.}
}

@Inbook{Schneider17,
author="Schneider, Klaus
and Brandt, Jens",
editor="Ha, Soonhoi
and Teich, J{\"u}rgen",
title="Quartz: A Synchronous Language for Model-Based Design of Reactive Embedded Systems",
bookTitle="Handbook of Hardware/Software Codesign",
year="2017",
publisher="Springer Netherlands",
address="Dordrecht",
pages="1--30",
abstract="Since the synchronous model of computation is shared between synchronous languages and synchronous hardware circuits, synchronous languages lend themselves well for hardware/software codesign in the sense that from the same synchronous program both hardware and software can be generated. In this chapter, we informally describe the syntax and semantics of the imperative synchronous language Quartz and explain how these programs are first analyzed and then compiled to hardware and software: To this end, the programs are translated to synchronous guarded actions whose causality has to be ensured as a major consistency analysis of the compiler. We then explain the synthesis of hardware circuits and sequential programs from synchronous guarded actions and briefly look at extensions of the Quartz language in the conclusions.",
isbn="978-94-017-7358-4"
}

@TECHREPORT{Andre03,
AUTHOR = "C. Andr\'e",
TITLE = {Semantics of SyncCharts},
YEAR = {2003},
INSTITUTION = "I3S Laboratory",
MONTH = {April},
ADDRESS = {Sophia-Antipolis, France},
NUMBER = {ISRN I3S/RR--2003--24--FR}
}

@article{Peleg87,
  added-at = {2011-07-05T00:00:00.000+0200},
  author = {Peleg, David},
  biburl = {https://www.bibsonomy.org/bibtex/23625adc714b03eeff067ef14884716fa/dblp},
  ee = {http://dx.doi.org/10.1016/0022-0000(87)90035-3},
  interhash = {86cf10c22adbf7256569a429c998842b},
  intrahash = {3625adc714b03eeff067ef14884716fa},
  journal = {Journal of Computer and System Sciences},
  keywords = {dblp},
  number = 1,
  pages = {23-58},
  timestamp = {2011-07-06T11:39:54.000+0200},
  title = {Communication in Concurrent Dynamic Logic.},
  volume = 35,
  year = 1987
}

@inproceedings{Platzer07,
  added-at = {2007-07-03T00:00:00.000+0200},
  author = {Platzer, Andr\'e},
  biburl = {https://www.bibsonomy.org/bibtex/2eaf5938fb432bea0597ab04ba2bd378d/dblp},
  booktitle = {Logical Foundations of Computer Science (LFCS)},
  crossref = {conf/lfcs/2007},
  date = {2007-07-03},
  description = {dblp},
  ee = {http://dx.doi.org/10.1007/978-3-540-72734-7_32},
  interhash = {1adfc9802047f4f56e3c9e7bea734cf7},
  intrahash = {eaf5938fb432bea0597ab04ba2bd378d},
  isbn = {978-3-540-72732-3},
  keywords = {dblp},
  pages = {457-471},
  publisher = {Springer},
  timestamp = {2007-07-16T13:39:34.000+0200},
  title = {A Temporal Dynamic Logic for Verifying Hybrid System Invariants.},
  year = 2007,
   series = {Lecture Notes in Computer Science (LNCS)},
  volume = 4514,
}

@MISC{Berry99,
    author = {G. Berry},
    title = {The Constructive Semantics of Pure {Esterel}},
    year = {1999}
}

@phdthesis{Gentzen34,
  added-at = {2015-09-08T19:28:45.000+0200},
  author = {Gentzen, Gerhard},
  biburl = {https://www.bibsonomy.org/bibtex/251acac38e8b7924d2bc69d533534dc95/genealogie},
  dnbtitleid = {570229936},
  interhash = {135c39c4b5254d9d65dfcac6c7e6274f},
  intrahash = {51acac38e8b7924d2bc69d533534dc95},
  keywords = {dnb},
  school = {NA G\"{o}ttingen},
  timestamp = {2015-09-08T19:28:45.000+0200},
  title = {Untersuchungen \"{u}ber das logische Schlie\ss en},
  year = 1934
}

@article{Brzozowski64,
  added-at = {2012-01-26T00:00:00.000+0100},
  author = {Brzozowski, Janusz A.},
  biburl = {https://www.bibsonomy.org/bibtex/2cb58dd2f3af19d3f186c9bcc0878a3e4/dblp},
  ee = {http://doi.acm.org/10.1145/321239.321249},
  interhash = {2113e77db971d10b1b004de112e3db55},
  intrahash = {cb58dd2f3af19d3f186c9bcc0878a3e4},
  journal = {Journal of the ACM},
  keywords = {dblp},
  number = 4,
  pages = {481-494},
  timestamp = {2012-01-27T11:35:41.000+0100},
  title = {Derivatives of Regular Expressions.},
  volume = 11,
  year = 1964
}

@inproceedings{Arden61,
  added-at = {2014-12-16T00:00:00.000+0100},
  author = {Arden, Dean N.},
  biburl = {https://www.bibsonomy.org/bibtex/24d72f7226e809d6f606cc4c71c4efcf1/dblp},
  booktitle = {SWCT (FOCS)},
  crossref = {conf/focs/FOCS2},
  ee = {http://doi.ieeecomputersociety.org/10.1109/FOCS.1961.13},
  interhash = {7bc7d94984ad96a63cef4c6b6582629a},
  intrahash = {4d72f7226e809d6f606cc4c71c4efcf1},
  keywords = {dblp},
  pages = {133-151},
  publisher = {IEEE Computer Society},
  timestamp = {2015-06-19T02:05:02.000+0200},
  title = {Delayed-logic and finite-state machines},
  year = 1961
}

@article{Godel31,
  added-at = {2010-07-22T15:48:09.000+0200},
  author = {G\"odel, Kurt},
  biburl = {https://www.bibsonomy.org/bibtex/2a87070d102ce701aa6f8d59bd537a432/voj},
  interhash = {8c9b154775c8f13dc1d3c9e638386bfc},
  intrahash = {a87070d102ce701aa6f8d59bd537a432},
  journal = {Monatshefte f\"ur Mathematik und Physik},
  keywords = {foundations mathematics},
  number = 1,
  pages = {173--198},
  timestamp = {2010-07-22T15:48:09.000+0200},
  title = {\"uber formal unentscheidbare S\"{a}tze der Principia Mathematica und verwandter Systeme},
  volume = 38,
  year = 1931
}

@inproceedings{Halbwachs93b,
author = {Halbwachs, Nicolas and Lagnier, Fabienne and Raymond, Pascal},
title = {Synchronous Observers and the Verification of Reactive Systems},
year = {1993},
isbn = {3540198520},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
booktitle = {Proceedings of the Third International Conference on Methodology and Software Technology: Algebraic Methodology and Software Technology},
pages = {83--96},
numpages = {14},
series = {AMAST '93}
}

@inproceedings{Pilaud88,
author = {Pilaud, Daniel and Halbwachs, Nicolas},
title = {From a Synchronous Declarative Language to a Temporal Logic Dealing with Multiform Time},
year = {1988},
isbn = {0387503021},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
booktitle = {Proceedings of a Symposium on Formal Techniques in Real-Time and Fault-Tolerant Systems},
pages = {99--110},
numpages = {12},
location = {Warwick, United Kingdom}
}

@InProceedings{Jagadeesan95,
author="Jagadeesan, Lalita Jategaonkar
and Puchol, Carlos
and Von Olnhausen, James E.",
editor="Wolper, Pierre",
title="Safety property verification of Esterel programs and applications to telecommunications software",
booktitle="Computer Aided Verification",
year="1995",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="127--140",
isbn="978-3-540-49413-3"
}

@inproceedings{Andre09,
author = {Andr\'{e}, Charles and Mallet, Fr\'{e}d\'{e}ric},
title = {Specification and Verification of Time Requirements with CCSL and Esterel},
year = {2009},
isbn = {9781605583563},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
abstract = {The UML Profile for Modeling and Analysis of Real-Time and Embedded (MARTE) systems has recently been adopted by the OMG. Its Time Model extends the informal and simplistic Simple Time package proposed by UML2 and offers a broad range of capabilities required to model real-time systems including discrete/dense and chronometric/logical time. MARTE OMG specification introduces a Time Structure inspired by Time models of the concurrency theory and proposes a new clock constraint specification language (CCSL) to specify, within the context of UML, logical and chronometric time constraints.This paper introduces the formal semantics of a fundamental subset of CCSL clock constraints and proposes a process to use CCSL both as a high-level specification language for UML models and as a golden model to verify the conformance of implementations with the specification.A digital filtering video application is used as a running example to support the discussion. The application is first formally specified with CCSL and the specification is refined based on feedback from our CCSL-dedicated simulator. In a second phase, an Esterel program of the application is considered. This program is instrumented with observers derived from the CCSL specification. Esterel Studio formal verification facilities are then used to check the conformity of the Esterel implementation with the CCSL specification. A specific library of Esterel observers has been built for this purpose.},
booktitle = {Proceedings of the 2009 ACM SIGPLAN/SIGBED Conference on Languages, Compilers, and Tools for Embedded Systems},
pages = {167--176},
numpages = {10},
keywords = {uml, marte, time model, synchronous languages},
location = {Dublin, Ireland},
series = {LCTES '09}
}

@InProceedings{Berry85,
author="Berry, G{\'e}rard
and Cosserat, Laurent",
editor="Brookes, Stephen D.
and Roscoe, Andrew William
and Winskel, Glynn",
title="The ESTEREL synchronous programming language and its mathematical semantics",
booktitle="Seminar on Concurrency",
year="1985",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="389--448",
isbn="978-3-540-39593-5"
}

@book{Bertot04,
  added-at = {2015-09-09T00:00:00.000+0200},
  author = {Bertot, Yves and Cast\'eran, Pierre},
  biburl = {https://www.bibsonomy.org/bibtex/2f3efe3e802956ef63b8b8fb5696108d6/dblp},
  ee = {http://dx.doi.org/10.1007/978-3-662-07964-5},
  interhash = {9377b95a96ecaf45aaf1023f46ac002c},
  intrahash = {f3efe3e802956ef63b8b8fb5696108d6},
  isbn = {978-3-662-07964-5},
  keywords = {dblp},
  pages = {1-472},
  publisher = {Springer},
  series = {Texts in Theoretical Computer Science. An EATCS Series},
  timestamp = {2015-09-10T11:41:56.000+0200},
  title = {Interactive Theorem Proving and Program Development - {Coq'Art}: The Calculus of Inductive Constructions},
  year = 2004
}

@inproceedings{Bourke17,
author = {Bourke, Timothy and Brun, L\'{e}lio and Dagand, Pierre-\'{E}variste and Leroy, Xavier and Pouzet, Marc and Rieg, Lionel},
title = {A Formally Verified Compiler for Lustre},
year = {2017},
isbn = {9781450349888},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
abstract = { The correct compilation of block diagram languages like Lustre, Scade, and a discrete subset of Simulink is important since they are used to program critical embedded control software. We describe the specification and verification in an Interactive Theorem Prover of a compilation chain that treats the key aspects of Lustre: sampling, nodes, and delays. Building on CompCert, we show that repeated execution of the generated assembly code faithfully implements the dataflow semantics of source programs. We resolve two key technical challenges. The first is the change from a synchronous dataflow semantics, where programs manipulate streams of values, to an imperative one, where computations manipulate memory sequentially. The second is the verified compilation of an imperative language with encapsulated state to C code where the state is realized by nested records. We also treat a standard control optimization that eliminates unnecessary conditional statements. },
booktitle = {Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {586--601},
numpages = {16},
keywords = {Interactive Theorem Proving (Coq), Synchronous Languages (Lustre), Verified Compilation},
location = {Barcelona, Spain},
series = {PLDI 2017}
}

@misc{Berry19,
      title={Towards Coq-verified Esterel Semantics and Compiling},
      author={G\'erard Berry and Lionel Rieg},
      year={2019},
      eprint={1909.12582},
      archivePrefix={arXiv},
      primaryClass={cs.FL}
}

@INPROCEEDINGS{Hagen08,
    author = {George Hagen and Cesare Tinelli},
    title = {Scaling up the formal verification of Lustre programs with {SMT}-based techniques},
    booktitle = {In FMCAD ’08},
    year = {2008},
    pages = {1--9}
}

@INPROCEEDINGS{Ngo14,
  author={V. C. {Ngo} and J. {Talpin} and T. {Gautier}},
  booktitle={Proceedings of the 2014 Electronic System Level Synthesis Conference (ESLsyn)},
  title={Precise deadlock detection for polychronous data-flow specifications},
  year={2014},
  volume={},
  number={},
  pages={1-6}
  }

@inproceedings{Talpin15,
  added-at = {2017-05-23T00:00:00.000+0200},
  author = {Talpin, Jean-Pierre and Jouvelot, Pierre and Shukla, Sandeep Kumar},
  biburl = {https://www.bibsonomy.org/bibtex/27687953035db66d783bc3c4306aac18c/dblp},
  booktitle = {MEMOCODE},
  crossref = {conf/memocode/2015},
  ee = {https://doi.org/10.1109/MEMCOD.2015.7340465},
  interhash = {231913389f05a8177320a009ecc0cff2},
  intrahash = {7687953035db66d783bc3c4306aac18c},
  isbn = {978-1-5090-0237-5},
  keywords = {dblp},
  pages = {36-41},
  publisher = {IEEE},
  timestamp = {2019-10-17T12:53:45.000+0200},
  title = {Towards refinement types for time-dependent data-flow networks.},
  year = 2015
}

@article{Florence19,
author = {Florence, Spencer P. and You, Shu-Hung and Tov, Jesse A. and Findler, Robert Bruce},
title = {A Calculus for Esterel: If Can, Can. If No Can, No Can.},
year = {2019},
issue_date = {January 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {POPL},
abstract = {The language Esterel has found success in many safety-critical applications, such as fly-by-wire systems and nuclear power plant control software. Its imperative style is natural to programmers building such systems and its precise semantics makes it work well for reasoning about programs. Existing semantics of Esterel generally fall into two categories: translation to Boolean circuits, or operational semantics that give a procedure for running a whole program. In contrast, equational theories enable reasoning about program behavior via equational rewrites at the source level. Such theories form the basis for proofs of transformations inside compilers or for program refactorings, and defining program evaluation syntactically. This paper presents the first such equational calculus for Esterel. It also illustrates the calculus’s usefulness with a series of example equivalences and discuss how it enabled us to find bugs in Esterel implementations.},
journal = {Proc. ACM Program. Lang.},
month = jan,
articleno = {61},
numpages = {29},
keywords = {Synchronous Reactive Programming, Semantics, Esterel}
}

@inproceedings{Song21,
  author = {Song, Yahui and Chin, Wei-Ngan},
  booktitle = {VMCAI},
  pages = {417-440},
  publisher = {Springer},
  title = {A Synchronous Effects Logic for Temporal Verification of Pure Esterel.},
  year = 2021,
  series = {Lecture Notes in Computer Science (LNCS)},
  volume = 12597
}

@inproceedings{Gesell12,
author = {Gesell, Manuel and Schneider, Klaus},
title = {A Hoare Calculus for the Verification of Synchronous Languages},
year = {2012},
isbn = {9781450311250},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
abstract = {The synchronous model of computation divides the execution of a program into macro steps that consist of finitely many atomic micro steps (like assignments). The micro steps of a macro step are executed within the same variable environment (i.e. in parallel) but all updates to the variables are synchronously performed at the level of macro steps. The availability of a formally defined semantics allows one to use formal methods for the verification of synchronous programs. To this end, model checking is already widely used for synchronous programs, but the use of interactive verification e.g. by using a Hoare calculus, is only in its infancies. One reason for this situation is that the assignment rule of the classic Hoare calculus implicitly defines a sequential programming model which is only a special case of the synchronous model of computation.In this paper, we therefore suggest a generalization of the classic Hoare calculus to deal with synchronous programs. The main idea is thereby that the assignment rule refers to all assignments made in a macro step so that the synchronous model of computation is axiomatized. It is possible to rewrite all synchronous programs so that the assignments of every macro step are collected in a single tuple assignment. This way, our generalization of the assignment rule is applicable to arbitrary synchronous programs. We present non-trivial case studies that show the feasibility of our approach.},
booktitle = {Proceedings of the Sixth Workshop on Programming Languages Meets Program Verification},
pages = {37--48},
numpages = {12},
keywords = {hoare calculus, synchronous languages, verification},
location = {Philadelphia, Pennsylvania, USA},
series = {PLPV '12}
}

@InProceedings{Beckert01,
author="Beckert, Bernhard
and Schlager, Steffen",
editor="Gor{\'e}, Rajeev
and Leitsch, Alexander
and Nipkow, Tobias",
title="A Sequent Calculus for First-Order Dynamic Logic with Trace Modalities",
booktitle="Automated Reasoning",
year="2001",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="626--641",
abstract="The modalities of Dynamic Logic refer to the final state of a program execution and allow to specify programs with pre- and post- conditions. In this paper, we extend Dynamic Logic with additional trace modalities ``throughout'' and ``at least once'', which refer to all the states a program reaches. They allow one to specify and verify invariants and safety constraints that have to be valid throughout the execution of a program. We give a sound and (relatively) complete sequent calculus for this extended Dynamic Logic.",
isbn="978-3-540-45744-2"
}

@article{Feldman84,
title = {A probabilistic dynamic logic},
journal = {Journal of Computer and System Sciences},
volume = {28},
number = {2},
pages = {193-215},
year = {1984},
issn = {0022-0000},
author = {Yishai A. Feldman and David Harel},
abstract = {A logic, PrDL, is presented, which enables formal reasoning about probabilistic programs or, alternatively, reasoning probabilistically about conventional programs. The syntax of PrDL derives from Pratt's first-order dynamic logic and the semantics extends Kozen's semantics of probabilistic programs. An axiom system for PrDL is presented and shown to be complete relative to an extension of first-order analysis. For discrete probabilities it is shown that first-order analysis actually suffices. Examples are presented, both of the expressive power of PrDL, and of a proof in the axiom system.}
}

@book{Rustan07,
  added-at = {2016-10-04T00:00:00.000+0200},
  biburl = {https://www.bibsonomy.org/bibtex/2acd0e9957fbff9555d2eaec9b617ff04/dblp},
  booktitle = {The KeY Approach},
  ee = {http://dx.doi.org/10.1007/978-3-540-69061-0},
  interhash = {6bbd5482cc6381e8e40dbde85b3ae29b},
  intrahash = {acd0e9957fbff9555d2eaec9b617ff04},
  isbn = {978-3-540-68977-5},
  keywords = {dblp},
  publisher = {Springer},
  series = {Lecture Notes in Computer Science (LNCS)},
  timestamp = {2016-10-05T11:34:35.000+0200},
  title = {Verification of Object-Oriented Software. The KeY Approach},
  author = {K. Rustan and M. Leino}
  volume = 4334,
  year = 2007
}

@inproceedings{Platzer07b,
  added-at = {2007-09-20T00:00:00.000+0200},
  author = {Platzer, Andr\'e},
  biburl = {https://www.bibsonomy.org/bibtex/2bd594cc2adadc2090a623ca837173ac8/dblp},
  booktitle = {International Conference on Theorem Proving with Analytic Tableaux and Related Methods (TABLEAUX)},
  crossref = {conf/tableaux/2007},
  date = {2007-09-20},
  description = {dblp},
  ee = {http://dx.doi.org/10.1007/978-3-540-73099-6_17},
  interhash = {5251673fa97dd4ea741ed1e54dcd8028},
  intrahash = {bd594cc2adadc2090a623ca837173ac8},
  isbn = {978-3-540-73098-9},
  keywords = {dblp},
  pages = {216-232},
  publisher = {Springer Berlin Heidelberg},
  timestamp = {2007-10-10T14:24:44.000+0200},
  title = {Differential Dynamic Logic for Verifying Parametric Hybrid Systems.},
  year = 2007,
  series = {Lecture Notes in Computer Science (LNCS)},
  volume = 4548,
}

@article{Zhang21,
title = {A clock-based dynamic logic for the verification of CCSL specifications in synchronous systems},
journal = {Science of Computer Programming},
volume = {203},
pages = {102591},
year = {2021},
issn = {0167-6423},
author = {Yuanrui Zhang and Hengyang Wu and Yixiang Chen and Fr\'ed\'eric Mallet},
keywords = {Dynamic logic, The clock constraint specification language, Synchronous systems, Verification, Theorem proving},
abstract = {The Clock Constraint Specification Language (CCSL) is a clock-based specification language for real-time embedded systems. With logical clocks defined as first-class citizens, CCSL provides a natural way for describing clock constraints in synchronous systems — a classical model of concurrency for real-time embedded systems. In this paper, we propose a clock-based dynamic logic called CCSL Dynamic Logic (CDL) for the verification of CCSL specifications in synchronous systems. It extends the first-order dynamic logic with a synchronous execution mechanism in its program model and with CCSL primitives as terms in its logical formulae. We build a sound and relatively complete proof system for CDL to support the verification. Compared with previous approaches for verifying CCSL specifications, which are based on model checking and SMT checking techniques, our approach, which is based on theorem-proving, offers a unified verification framework in which both bounded and unbounded CCSL specifications can be verified. Technically, with the proof system of CDL, a complex CDL formula can be semi-automatically transformed into a set of quantifier-free, arithmetical first-order logic (QF-AFOL) formulae which can be checked by an SMT solver in an efficient way. As a case study, we analyze a simple synchronous system throughout the paper to illustrate how CDL works. We analyze and prove the soundness and completeness of the proof system for CDL. Currently, CDL is partially mechanized in Coq.}
}

@article{Prisacariu10,
title = "Synchronous {Kleene} Algebra",
journal = "The Journal of Logic and Algebraic Programming",
volume = "79",
number = "7",
pages = "608 - 635",
year = "2010",
author = "Cristian Prisacariu"
}

@MISC{Zhang21b,
    howpublished = "\url{http://aiweb.techfak.uni-bielefeld.de/content/bworld-robot-control-software/}"
}
